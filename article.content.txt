# Maintaining cursor position across formatting operations

This article is for developers who are building text input widgets that
process the user's input to show it in a standard format. If you want
to do real-time formatting and update the text in the input field while
the user is editing it, this article is especially for you.

If you are well acquainted with the problem of maintaining cursor position
and you want to get straight to my code, you can see a live demo and
clone my GitHub repository. The documentation on GitHub tells you how to
use the code in your own project. In this article, I analyze the problem
and describe various approaches I explored in the search for a solution.


## Here is the problem

Suppose you're coding an input field that requires the user to enter the
population of a city. The input field automatically formats this number
with commas separating groups of three digits.

For example, if the user enters `112500`, the input field immediately
changes it to `112,500`.

The user has a cursor in the input field, which we'll represent with
^. Here the cursor is at the right end of the input text:

  112,500^

There are seven characters to the left of the cursor, so we say that
the cursor is at position 7.

We have to update the cursor position after formatting the input. The
cursor is currently at the right end of the input field, and we want to
keep it there after formatting the text.

Suppose the user enters a `0`:

  112,5000^

With the newly entered character, the cursor has moved to position 8. The
input field immediately formats the text `112,5000` to `1,125,000`. Now
there are nine characters, so we move the cursor to position 9:

  1,125,000^

The formula for maintaining the cursor at the right end of the input
field is simple: when the text field contains `n` characters, we put
the cursor at position `n`.

Things get complicated when the user places the cursor elsewhere in
the text.

Suppose the user moves the cursor to position 4:

  1,12^5,000

Now the user hits backspace, deleting the `2` and moving the cursor to
position 3:

  1,1^5,000

The input field formats `1,15,000` to `115,000`. Where should we put
the cursor? This is what happens if we keep it at position 3:

  115^,000

The cursor has jumped across the `5` character, which is not what the
user intended. The user expects the cursor to remain between the `1`
and the `5`:

  11^5,000

This is obvious to a human observer. It's less obvious how to compute
a cursor position that matches the user's expectations.


## This is why it's difficult

The root of the problem is that our text formatting does not involve the
cursor. Although the cursor is visually displayed in the text, it is not
logically part of the text. It is an interface element that assists the
user with manual text editing by indicating a position in the text. The
automatic text formatting that is performed by the input field operates on
a string, which is a sequence of characters without any representation of
the cursor position. After the text has been transformed by formatting,
we have to place the cursor in a position that minimizes the risk of
surprising the user.

In a few cases, the answer is obvious. If the formatting operation
leaves the text unchanged, we leave the cursor position unchanged. If
the cursor is at the leftmost or rightmost position prior to formatting,
we put it leftmost or rightmost respectively after formatting. In general
we have to consider the characters 
however, it isn't clear how we would proceed.



separate domains


## The status quo

Word
Excel
ATMs
bank websites
bank mobile apps

software libraries?


## Some definitions


## Approaches that don't work


## The numerical approach


## The textual approach


## The meta approach


## The retrospective approach


## Recommendations



